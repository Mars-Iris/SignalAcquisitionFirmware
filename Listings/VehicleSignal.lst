C51 COMPILER V9.56.0.0   VEHICLESIGNAL                                                     10/29/2022 15:36:11 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE VEHICLESIGNAL
OBJECT MODULE PLACED IN .\Objects\VehicleSignal.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE App\VehicleSignal.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\
                    -Listings\VehicleSignal.lst) TABS(2) OBJECT(.\Objects\VehicleSignal.obj)

line level    source

   1          #include  "./User/includes.h"
   2          #include  "./User/config.h"
   3          
   4          xdata SignalLineTypeDef SignalLine; 
   5          
   6          //========================================================================
   7          // 函数: u8 zuozhuanxiangdeng(SignalLineTypeDef *pSignalLine)
   8          // 描述: 获取左转向灯信号,如开启双闪，返回FLASE
   9          // 参数：pSignalLine
  10          // 返回: 开启左转返回TURE，关闭左转返回FLASE
  11          // 版本: V1.0, 2022-10-17
  12          //========================================================================
  13          static u8 zuozhuanxiangdeng(SignalLineTypeDef *pSignalLine)  //左转向灯 D1
  14          {
  15   1        xdata u8 zz_pin = BSP_ReadInputDataBit(&pSignalLine->zz);//读取输入状态
  16   1        xdata u8 yz_pin = BSP_ReadInputDataBit(&pSignalLine->yz);//读取输入状态
  17   1        
  18   1        if(zz_pin == TURE && yz_pin == FLASE)
  19   1            return TURE;
  20   1        else 
  21   1            return FLASE;
  22   1      }
  23          //========================================================================
  24          // 函数: u8 youzhuanxiangdeng(SignalLineTypeDef *pSignalLine)
  25          // 描述: 获取右转向灯信号,如开启双闪，返回FLASE
  26          // 参数：pSignalLine
  27          // 返回: 开启右转返回TURE，关闭左转返回FLASE
  28          // 版本: V1.0, 2022-10-17
  29          //========================================================================
  30          static u8 youzhuanxiangdeng(SignalLineTypeDef *pSignalLine)  //右转向灯 D2
  31          {
  32   1        
  33   1        xdata u8 zz_pin = BSP_ReadInputDataBit(&pSignalLine->zz);//读取输入状态
  34   1        xdata u8 yz_pin = BSP_ReadInputDataBit(&pSignalLine->yz);//读取输入状态
  35   1        
  36   1        if(zz_pin == FLASE && yz_pin == TURE)
  37   1            return TURE;
  38   1        else 
  39   1            return FLASE;
  40   1        
  41   1      }
  42          //========================================================================
  43          // 函数: u8 xihuo(SignalLineTypeDef *pSignalLine)
  44          // 描述: 获取车辆熄火状态,关联启动信号，着车之前必须出现启动信号。
  45          //       可使用开关量或则发动机转速评判熄火     
  46          // 参数：pSignalLine
  47          // 返回: 车辆着车返回TURE，车辆熄火返回FLASE
  48          // 版本: V1.0, 2022-10-17
  49          //========================================================================
  50          static u8 xihuo(SignalLineTypeDef *pSignalLine)  //熄火 D3
  51          {
  52   1        static xdata qidong_flag = FLASE;
  53   1        xdata u8 qd_pin   = BSP_ReadInputDataBit(&pSignalLine->qd);//读取输入状态
  54   1        xdata u8 xh_pin   = BSP_ReadInputDataBit(&pSignalLine->xh);//读取输入状态
C51 COMPILER V9.56.0.0   VEHICLESIGNAL                                                     10/29/2022 15:36:11 PAGE 2   

  55   1        xdata u8 xh_type  = pSignalLine->xh.type;
  56   1        
  57   1        if(qd_pin == TURE)
  58   1            qidong_flag = TURE;//出现启动信号
  59   1      
  60   1          switch(xh_type) 
  61   1          {
  62   2            case SWITCHING://开关量评判模式(关联启动信号)
  63   2                            if((xh_pin == TURE) && (qidong_flag == TURE)) 
  64   2                            {
  65   3                              qidong_flag = FLASE;//清空启动信号标志为
  66   3                              return TURE;
  67   3                            }
  68   2                            else 
  69   2                              return FLASE;
  70   2            case SPEED://转速评判模式
  71   2                            return FLASE;
  72   2            case SWITCHING_AND_SPEED://开关量和转速评判
  73   2                            return FLASE;
  74   2            case SWITCHING_OR_SPEED://开关量或转速评判
  75   2                            return FLASE;
  76   2            default:
  77   2                            return FLASE; 
  78   2          }
  79   1      }
  80          //========================================================================
  81          // 函数: u8 shousha(SignalLineTypeDef *pSignalLine)
  82          // 描述: 获取手刹信号
  83          // 参数：pSignalLine，
  84          // 返回: 拉手刹返回TURE，松手刹返回FLASE
  85          // 版本: V1.0, 2022-10-17
  86          //========================================================================
  87          static u8 shousha(SignalLineTypeDef *pSignalLine)  //手刹D4
  88          {
  89   1        
  90   1        u8 ss_pin = BSP_ReadInputDataBit(&pSignalLine->ss);//读取输入状态
  91   1        
  92   1        return ss_pin;  
  93   1        
  94   1      }
  95          //========================================================================
  96          // 函数: u8 anquandai(SignalLineTypeDef *pSignalLine)
  97          // 描述: 获取安全带信号
  98          // 参数：pSignalLine，
  99          // 返回: 系上安全带返回TURE，松开安全带返回FLASE
 100          // 版本: V1.0, 2022-10-17
 101          //========================================================================
 102          static u8 anquandai(SignalLineTypeDef *pSignalLine)  //安全带D5
 103          {
 104   1        
 105   1        u8 aqd_pin = BSP_ReadInputDataBit(&pSignalLine->aqd);//读取输入状态
 106   1        
 107   1        return aqd_pin; 
 108   1        
 109   1      }
 110          //========================================================================
 111          // 函数: u8 chenmen_zq(SignalLineTypeDef *pSignalLine)
 112          // 描述: 获取车门信号,左前、右前、左后、右后共四个门，
 113          // 参数：pSignalLine，
 114          // 返回: 打开车门返回FLASE，关闭车门返回0xF0,车门为高四位
 115          // 版本: V1.0, 2022-10-17
 116          //========================================================================
C51 COMPILER V9.56.0.0   VEHICLESIGNAL                                                     10/29/2022 15:36:11 PAGE 3   

 117          static u8 chemen(SignalLineTypeDef *pSignalLine)      //车门D6
 118          {
 119   1        
 120   1        u8 cm_pin = BSP_ReadInputDataBit(&pSignalLine->cm);//读取输入状态
 121   1        
 122   1        if(cm_pin == TURE)
 123   1          return 0xF0;  //车门为高四位
 124   1        else 
 125   1          return FLASE;
 126   1        
 127   1      }
 128          //========================================================================
 129          // 函数: u8 daochedeng(SignalLineTypeDef *pSignalLine)
 130          // 描述: 获取倒车灯信号
 131          // 参数：pSignalLine，
 132          // 返回: 挂倒挡返回TURE，不在倒挡返回FLASE
 133          // 版本: V1.0, 2022-10-17
 134          //========================================================================
 135          static u8 daochedeng(SignalLineTypeDef *pSignalLine)  //倒车灯 D7
 136          {
 137   1        
 138   1        u8 dcd_pin = BSP_ReadInputDataBit(&pSignalLine->dcd);//读取输入状态
 139   1        
 140   1        return dcd_pin; 
 141   1        
 142   1      }
 143          //========================================================================
 144          // 函数: u8 laba(SignalLineTypeDef *pSignalLine)
 145          // 描述: 获取喇叭信号
 146          // 参数：pSignalLine，
 147          // 返回: 按喇叭返回TURE，松开喇叭返回FLASE
 148          // 版本: V1.0, 2022-10-17
 149          //========================================================================
 150          static u8 laba(SignalLineTypeDef *pSignalLine)  //喇叭  D8
 151          {
 152   1        
 153   1        u8 lb_pin = BSP_ReadInputDataBit(&pSignalLine->lb);//读取输入状态
 154   1        
 155   1        return lb_pin;  
 156   1        
 157   1      }
 158          //========================================================================
 159          // 函数: u8 raoche1(SignalLineTypeDef *pSignalLine)
 160          // 描述: 获取绕车开关1信号
 161          // 参数：pSignalLine，
 162          // 返回: 按开关返回PRESS，松开开关返回NOPRESS
 163          // 版本: V1.0, 2022-10-17
 164          //========================================================================
 165          static u8 raoche1(SignalLineTypeDef *pSignalLine)  //绕车1   D9
 166          {
 167   1        
 168   1        u8 rc1_pin = BSP_ReadInputDataBit(&pSignalLine->rc1);//读取输入状态
 169   1        
 170   1        return rc1_pin; 
 171   1        
 172   1      }
 173          //========================================================================
 174          // 函数: u8 raoche1(SignalLineTypeDef *pSignalLine)
 175          // 描述: 获取绕车开关2信号
 176          // 参数：pSignalLine，
 177          // 返回: 按开关返回PRESS，松开开关返回NOPRESS
 178          // 版本: V1.0, 2022-10-17
C51 COMPILER V9.56.0.0   VEHICLESIGNAL                                                     10/29/2022 15:36:11 PAGE 4   

 179          //========================================================================
 180          static u8 raoche2(SignalLineTypeDef *pSignalLine)  //绕车2   D10
 181          {
 182   1        
 183   1        u8 rc2_pin = BSP_ReadInputDataBit(&pSignalLine->rc2);//读取输入状态
 184   1        
 185   1        return rc2_pin; 
 186   1        
 187   1      }
 188          //========================================================================
 189          // 函数: u8 wudeng(SignalLineTypeDef *pSignalLine)
 190          // 描述: 获取雾灯开关2信号
 191          // 参数：pSignalLine，
 192          // 返回: 开雾灯返回TURE，关闭雾灯返回FLASE
 193          // 版本: V1.0, 2022-10-17
 194          //========================================================================
 195          static u8 wudeng(SignalLineTypeDef *pSignalLine)  //雾灯 D11
 196          {
 197   1        
 198   1        u8 wd_pin = BSP_ReadInputDataBit(&pSignalLine->wd);//读取输入状态
 199   1        
 200   1        return wd_pin;  
 201   1        
 202   1      }
 203          //========================================================================
 204          // 函数: u8 yuanguang(SignalLineTypeDef *pSignalLine)
 205          // 描述: 获取远光开关信号
 206          // 参数：pSignalLine，
 207          // 返回: 开远光灯返回TURE，关闭远光灯返回FLASE
 208          // 版本: V1.0, 2022-10-17
 209          //========================================================================
 210          static u8 yuanguang(SignalLineTypeDef *pSignalLine)  //远光 D12
 211          {
 212   1        
 213   1        u8 yg_pin = BSP_ReadInputDataBit(&pSignalLine->yg);//读取输入状态
 214   1        
 215   1        return yg_pin;  
 216   1        
 217   1      }
 218          //========================================================================
 219          // 函数: u8 jinguang(SignalLineTypeDef *pSignalLine)
 220          // 描述: 获取近光开关信号
 221          // 参数：pSignalLine，
 222          // 返回: 开近光灯返回TURE，关闭近光灯返回FLASE
 223          // 版本: V1.0, 2022-10-17
 224          //========================================================================
 225          static u8 jinguang(SignalLineTypeDef *pSignalLine)  //近光 D13
 226          {
 227   1        
 228   1        u8 jg_pin = BSP_ReadInputDataBit(&pSignalLine->jg);//读取输入状态
 229   1        
 230   1        return jg_pin;  
 231   1        
 232   1      }
 233          //========================================================================
 234          // 函数: u8 xiaodeng(SignalLineTypeDef *pSignalLine)
 235          // 描述: 获取小灯开关信号
 236          // 参数：pSignalLine，
 237          // 返回: 开小灯返回TURE，关闭小灯返回FLASE
 238          // 版本: V1.0, 2022-10-17
 239          //========================================================================
 240          static u8 xiaodeng(SignalLineTypeDef *pSignalLine)  //小灯 D14
C51 COMPILER V9.56.0.0   VEHICLESIGNAL                                                     10/29/2022 15:36:11 PAGE 5   

 241          {
 242   1        
 243   1        u8 xd_pin = BSP_ReadInputDataBit(&pSignalLine->xd);//读取输入状态
 244   1        
 245   1        return xd_pin;  
 246   1        
 247   1      }
 248          //========================================================================
 249          // 函数: u8 jiaosha(SignalLineTypeDef *pSignalLine)
 250          // 描述: 获取脚刹信号
 251          // 参数：pSignalLine，
 252          // 返回: 踩脚刹返回TURE，松开脚刹返回FLASE
 253          // 版本: V1.0, 2022-10-17
 254          //========================================================================
 255          static u8 jiaosha(SignalLineTypeDef *pSignalLine)  //脚刹 D15
 256          {
 257   1        
 258   1        u8 js_pin = BSP_ReadInputDataBit(&pSignalLine->js);//读取输入状态
 259   1        
 260   1        return js_pin;  
 261   1        
 262   1      }
 263          //========================================================================
 264          // 函数: u8 yushua(SignalLineTypeDef *pSignalLine)
 265          // 描述: 获取雨刷器信号
 266          // 参数：pSignalLine，
 267          // 返回: 开雨刷器返回TURE，关闭雨刷器返回FLASE
 268          // 版本: V1.0, 2022-10-17
 269          //========================================================================
 270          static u8 yushua(SignalLineTypeDef *pSignalLine)  //雨刷 D16
 271          {
 272   1        
 273   1        u8 ys_pin = BSP_ReadInputDataBit(&pSignalLine->ys);//读取输入状态
 274   1        
 275   1        return ys_pin;  
 276   1        
 277   1      }
 278          //========================================================================
 279          // 函数: u8 zuohoushi(SignalLineTypeDef *pSignalLine)
 280          // 描述: 获取调节左后视镜信号
 281          // 参数：pSignalLine，
 282          // 返回: 调节左后视镜返回TURE，未调节返回FLASE
 283          // 版本: V1.0, 2022-10-17
 284          //========================================================================
 285          static u8 zuohoushi(SignalLineTypeDef *pSignalLine)  //左后视 D17
 286          {
 287   1        
 288   1        u8 zhs_pin = BSP_ReadInputDataBit(&pSignalLine->zhs);//读取输入状态
 289   1        
 290   1        return zhs_pin; 
 291   1        
 292   1      }
 293          //========================================================================
 294          // 函数: u8 qidong(SignalLineTypeDef *pSignalLine)
 295          // 描述: 获取启动开关信号
 296          // 参数：pSignalLine，
 297          // 返回: 启动点火时返回TURE，松开启动钥匙返回FLASE
 298          // 版本: V1.0, 2022-10-17
 299          //========================================================================
 300          static u8 qidong(SignalLineTypeDef *pSignalLine)  //启动开关 D18
 301          {
 302   1        
C51 COMPILER V9.56.0.0   VEHICLESIGNAL                                                     10/29/2022 15:36:11 PAGE 6   

 303   1        u8 qd_pin = BSP_ReadInputDataBit(&pSignalLine->qd);//读取输入状态
 304   1        
 305   1        return qd_pin;  
 306   1        
 307   1      }
 308          //========================================================================
 309          // 函数: u8 neihoushi(SignalLineTypeDef *pSignalLine)
 310          // 描述: 获取调节内后视镜信号
 311          // 参数：pSignalLine，
 312          // 返回: 调节内后视镜返回TURE，未调节返回FLASE
 313          // 版本: V1.0, 2022-10-17
 314          //========================================================================
 315          static u8 neihoushi(SignalLineTypeDef *pSignalLine)  //内后视 D19
 316          {
 317   1        
 318   1        xdata u8 nhs_pin = BSP_ReadInputDataBit(&pSignalLine->nhs);//读取输入状态
 319   1        
 320   1        return nhs_pin; 
 321   1        
 322   1      }
 323          //========================================================================
 324          // 函数: u8 zuoyitiaojie(SignalLineTypeDef *pSignalLine)
 325          // 描述: 获取调节座椅信号
 326          // 参数：pSignalLine，
 327          // 返回: 调节座椅返回TURE，未调节返回FLASE
 328          // 版本: V1.0, 2022-10-17
 329          //========================================================================
 330          static u8 zuoyitiaojie(SignalLineTypeDef *pSignalLine)  //座椅调节开关 D20
 331          {
 332   1        
 333   1        u8 zytj_pin = BSP_ReadInputDataBit(&pSignalLine->zytj);//读取输入状态
 334   1        
 335   1        return zytj_pin;  
 336   1        
 337   1      }
 338          //========================================================================
 339          // 函数: u8 dangwei(SignalLineTypeDef *pSignalLine)
 340          // 描述: 获取挡位信号，传感器类型有磁感和倾角两种类型。
 341          // 参数：pSignalLine，
 342          // 返回:  GEAR1    1档
 343          //        GEAR2    2档
 344          //        GEAR3    3档
 345          //        GEAR4    4档
 346          //        GEAR5    5档
 347          //        GEARR    R档
 348          // 版本: V1.0, 2022-10-17
 349          //========================================================================
 350          static u8 dangwei(SignalLineTypeDef *pSignalLine)  //挡位D21--D24
 351          {
 352   1        xdata u8 temp = 0;
 353   1        xdata u8 dw1_pin = BSP_ReadInputDataBit(&pSignalLine->dw1);//读取输入状态D21
 354   1        xdata u8 dw2_pin = BSP_ReadInputDataBit(&pSignalLine->dw2);//读取输入状态D22
 355   1        xdata u8 dw3_pin = BSP_ReadInputDataBit(&pSignalLine->dw2);//读取输入状态D23
 356   1        xdata u8 dw4_pin = BSP_ReadInputDataBit(&pSignalLine->dw4);//读取输入状态D24
 357   1        xdata u8 dw1_type = pSignalLine->dw1.type;//获取传感器类型
 358   1        
 359   1        switch(dw1_type)
 360   1        {
 361   2          case  MAGNETIC://磁传感器
 362   2                          temp = (dw1_pin | dw2_pin<<1 |  dw3_pin<<2 | dw4_pin<<3);
 363   2                          if(temp == 0x01)
 364   2                            return  GEAR1;
C51 COMPILER V9.56.0.0   VEHICLESIGNAL                                                     10/29/2022 15:36:11 PAGE 7   

 365   2                          else if(temp == 0x02)
 366   2                            return  GEAR2;
 367   2                          else if(temp == 0x04)
 368   2                            return  GEAR3;
 369   2                          else if(temp == 0x08)
 370   2                            return  GEAR4;
 371   2                          else if(temp == 0x05)
 372   2                            return  GEAR5;
 373   2                          else if(temp == 0x0F)
 374   2                            return  GEARR;
 375   2                          else 
 376   2                            return  FLASE;
 377   2          case  ANGLE://磁传感器
 378   2                          temp = (dw1_pin | dw2_pin<<1 |  dw3_pin<<2);
 379   2                          if(temp == 0x06)
 380   2                            return  GEAR1;
 381   2                          else if(temp ==  0x05)
 382   2                            return  GEAR2;
 383   2                          else if(temp ==  0x04)
 384   2                            return  GEAR3;
 385   2                          else if(temp ==  0x03)
 386   2                            return  GEAR4;
 387   2                          else if(temp ==  0x02)
 388   2                            return  GEAR5;
 389   2                          else if(temp ==  0x01)
 390   2                            return  GEARR;
 391   2                          else 
 392   2                            return  FLASE;
 393   2          default:
 394   2            
 395   2                return  FLASE;        
 396   2        }
 397   1      
 398   1        
 399   1      }
 400          //========================================================================
 401          // 函数: u8 zuoyiyali(SignalLineTypeDef *pSignalLine)
 402          // 描述: 获取座椅（压力）信号
 403          // 参数：pSignalLine，
 404          // 返回: 座椅有压力返回TURE，没有压力返回FLASE
 405          // 版本: V1.0, 2022-10-17
 406          //========================================================================
 407          static u8 zuoyiyali(SignalLineTypeDef *pSignalLine)  ///座椅（压力） D25
 408          {
 409   1        
 410   1        xdata u8 zyyl_pin = BSP_ReadInputDataBit(&pSignalLine->zyyl);//读取输入状态
 411   1        
 412   1        return zyyl_pin;  
 413   1        
 414   1      }
 415          //========================================================================
 416          // 函数: u8 lihe(SignalLineTypeDef *pSignalLine)
 417          // 描述: 获取离合器信号
 418          // 参数：pSignalLine，
 419          // 返回: 踩下离合器返回TURE，抬起离合器返回FLASE
 420          // 版本: V1.0, 2022-10-17
 421          //========================================================================
 422          static u8 lihe(SignalLineTypeDef *pSignalLine)   //离合 D26
 423          {
 424   1        
 425   1        u8 lh_pin = BSP_ReadInputDataBit(&pSignalLine->lh);//读取输入状态
 426   1        
C51 COMPILER V9.56.0.0   VEHICLESIGNAL                                                     10/29/2022 15:36:11 PAGE 8   

 427   1        return lh_pin;  
 428   1        
 429   1      }
 430          //========================================================================
 431          // 函数: u8 yaoshimen(SignalLineTypeDef *pSignalLine)
 432          // 描述: 获取钥匙门信号
 433          // 参数：pSignalLine，
 434          // 返回: 打开钥匙门开关返回TURE，关闭钥匙门开关返回FLASE
 435          // 版本: V1.0, 2022-10-17
 436          //========================================================================
 437          static u8 yaoshimen(SignalLineTypeDef *pSignalLine)   //钥匙门开关 D28
 438          {
 439   1        
 440   1        u8 ysm_pin = BSP_ReadInputDataBit(&pSignalLine->ysm);//读取输入状态
 441   1        
 442   1        return ysm_pin; 
 443   1        
 444   1      }
 445          //========================================================================
 446          // 函数: u8 fushache(SignalLineTypeDef *pSignalLine)
 447          // 描述: 获取副刹信号
 448          // 参数：pSignalLine，
 449          // 返回: 踩下副刹车返回TURE，抬起副刹车返回FLASE
 450          // 版本: V1.0, 2022-10-17
 451          //========================================================================
 452          static u8 fushache(SignalLineTypeDef *pSignalLine)   //副刹车 D29
 453          {
 454   1        
 455   1        u8 fsc_pin = BSP_ReadInputDataBit(&pSignalLine->fsc);//读取输入状态
 456   1        
 457   1        return fsc_pin; 
 458   1        
 459   1      }
 460          //========================================================================
 461          // 函数: u8 chuangdong(SignalLineTypeDef *pSignalLine)
 462          // 描述: 获取起步时闯动信号
 463          // 参数：pSignalLine，
 464          // 返回: 出线闯动返回TURE，平稳返回FLASE
 465          // 版本: V1.0, 2022-10-17
 466          //========================================================================
 467          static u8 chuangdong(SignalLineTypeDef *pSignalLine)   //闯动传感器 D30
 468          {
 469   1        
 470   1        u8 cd_pin = BSP_ReadInputDataBit(&pSignalLine->cd);//读取输入状态
 471   1        
 472   1        return cd_pin;  
 473   1        
 474   1      }
 475          //========================================================================
 476          // 函数: u8 raoche3(SignalLineTypeDef *pSignalLine)
 477          // 描述: 获取绕车3信号
 478          // 参数：pSignalLine，
 479          // 返回: 按下返回TURE，未按下FLASE
 480          // 版本: V1.0, 2022-10-17
 481          //========================================================================
 482          static u8 raoche3(SignalLineTypeDef *pSignalLine)   //绕车3  D31
 483          {
 484   1        
 485   1        u8 rc3_pin = BSP_ReadInputDataBit(&pSignalLine->rc3);//读取输入状态
 486   1        
 487   1        return rc3_pin; 
 488   1        
C51 COMPILER V9.56.0.0   VEHICLESIGNAL                                                     10/29/2022 15:36:11 PAGE 9   

 489   1      }
 490          //========================================================================
 491          // 函数: u8 shijing(SignalLineTypeDef *pSignalLine)
 492          // 描述: 获取双闪信号
 493          // 参数：pSignalLine，
 494          // 返回: 打开双闪返回TURE，关闭双闪返回FLASE
 495          // 版本: V1.0, 2022-10-17
 496          //========================================================================
 497          static u8 shijing(SignalLineTypeDef *pSignalLine)   //示警开关
 498          {
 499   1        
 500   1        u8 zz_pin = BSP_ReadInputDataBit(&pSignalLine->zz);//读取输入状态
 501   1        u8 yz_pin = BSP_ReadInputDataBit(&pSignalLine->yz);//读取输入状态
 502   1        
 503   1        if(zz_pin == TURE && yz_pin == TURE)
 504   1            return TURE;
 505   1        else 
 506   1            return FLASE;
 507   1        
 508   1      }
 509          //========================================================================
 510          // 函数: u8 kongdang(SignalLineTypeDef *pSignalLine)
 511          // 描述: 获取空挡信号
 512          // 参数：pSignalLine，
 513          // 返回: 空挡返回TURE，非空挡返回FLASE
 514          // 版本: V1.0, 2022-10-17
 515          //========================================================================
 516          static u8 kongdang(SignalLineTypeDef *pSignalLine)   //空挡
 517          {
 518   1        
 519   1        if(dangwei(pSignalLine) == TURE)
 520   1            return TURE;
 521   1        else 
 522   1            return FLASE;
 523   1        
 524   1      }
 525          //========================================================================
 526          // 函数: u8 guanchayibiao(SignalLineTypeDef *pSignalLine)
 527          // 描述: 获取观察仪表盘信号
 528          // 参数：pSignalLine，
 529          // 返回: 观察返回TURE，没有观察返回FLASE
 530          // 版本: V1.0, 2022-10-17
 531          //========================================================================
 532          static u8 guanchayibiao(SignalLineTypeDef *pSignalLine)   //观察仪表盘
 533          {
 534   1        
 535   1        u8 gcybp_pin = BSP_ReadInputDataBit(&pSignalLine->gcybp);//读取输入状态
 536   1        
 537   1        return gcybp_pin; 
 538   1        
 539   1      }
 540          //========================================================================
 541          // 函数: void SignalLine_Init(void)
 542          // 描述: 初始化信号的配置，输入端口未配置，按默认端口接线
 543          // 参数：无
 544          // 版本: V1.0, 2022-10-17
 545          //========================================================================
 546          void SignalLine_Init(void)
 547          {
 548   1          xdata SignalLineTypeDef *pSignalLine = &SignalLine;
 549   1        
 550   1          BSP_GetFlashConfig(pSignalLine);  //获取配置参数
C51 COMPILER V9.56.0.0   VEHICLESIGNAL                                                     10/29/2022 15:36:11 PAGE 10  

 551   1          if(pSignalLine->zz.pin == 0)  pSignalLine->zz.pin   = D1;   //左转,默认端口为D1
 552   1          if(pSignalLine->yz.pin == 0)  pSignalLine->yz.pin   = D2;   //右转,默认端口为D2
 553   1          if(pSignalLine->xh.pin == 0)  pSignalLine->xh.pin   = D3;   //发电机,默认端口为D3
 554   1          if(pSignalLine->ss.pin == 0)  pSignalLine->ss.pin   = D4;   //手刹,默认端口为D4
 555   1          if(pSignalLine->aqd.pin == 0) pSignalLine->aqd.pin  = D5;   //安全带,默认端口为D5 
 556   1          if(pSignalLine->cm.pin == 0)  pSignalLine->cm.pin   = D6;   //车门,默认端口为D6
 557   1          if(pSignalLine->dcd.pin == 0) pSignalLine->dcd.pin  = D7;   //倒车灯,默认端口为D7
 558   1          if(pSignalLine->lb.pin == 0)  pSignalLine->lb.pin   = D8;   //喇叭,默认端口为D8
 559   1        
 560   1          if(pSignalLine->rc1.pin == 0) pSignalLine->rc1.pin  = D9;   //绕车1,默认端口为D9
 561   1          if(pSignalLine->rc2.pin == 0) pSignalLine->rc2.pin  = D10;  //绕车2,默认端口为D10
 562   1          if(pSignalLine->wd.pin == 0)  pSignalLine->wd.pin   = D11;  //雾灯,默认端口为D11
 563   1          if(pSignalLine->yg.pin == 0)  pSignalLine->yg.pin   = D12;  //远光,默认端口为D12
 564   1          if(pSignalLine->jg.pin == 0)  pSignalLine->jg.pin   = D13;  //近光,默认端口为D13  
 565   1          if(pSignalLine->xd.pin == 0)  pSignalLine->xd.pin   = D14;  //小灯,默认端口为D14
 566   1          if(pSignalLine->js.pin == 0)  pSignalLine->js.pin   = D15;  //脚刹,默认端口为D15
 567   1          if(pSignalLine->ys.pin == 0)  pSignalLine->ys.pin   = D16;  //雨刷,默认端口为D16
 568   1        
 569   1          if(pSignalLine->zhs.pin == 0) pSignalLine->zhs.pin  = D17;  //左后视镜,默认端口为D17
 570   1          if(pSignalLine->qd.pin == 0)  pSignalLine->qd.pin   = D18;  //启动,默认端口为D18
 571   1          if(pSignalLine->nhs.pin == 0) pSignalLine->nhs.pin  = D19;  //内后视镜,默认端口为D19
 572   1          if(pSignalLine->zyyl.pin == 0)pSignalLine->zyyl.pin = D20;  //远座椅(压力,默认端口为D20
 573   1          if(pSignalLine->dw1.pin == 0) pSignalLine->dw1.pin  = D21;  //挡位1,默认端口为D21 
 574   1          if(pSignalLine->dw2.pin == 0) pSignalLine->dw2.pin  = D22;  //挡位2,默认端口为D22
 575   1          if(pSignalLine->dw3.pin == 0) pSignalLine->dw3.pin  = D23;  //挡位3,默认端口为D23
 576   1          if(pSignalLine->dw4.pin == 0) pSignalLine->dw4.pin  = D24;  //挡位4,默认端口为D24
 577   1          
 578   1          if(pSignalLine->zytj.pin == 0)pSignalLine->zytj.pin = D25;  //调座椅,默认端口为D25
 579   1          if(pSignalLine->lh.pin == 0)  pSignalLine->lh.pin   = D26;  //离合,默认端口为D26
 580   1          if(pSignalLine->zs.pin == 0)  pSignalLine->zs.pin   = D27;  //转速,默认端口为D27
 581   1          if(pSignalLine->ysm.pin == 0) pSignalLine->ysm.pin  = D28;  //钥匙开关,默认端口为D28
 582   1          if(pSignalLine->fsc.pin == 0) pSignalLine->fsc.pin  = D29;  //副刹车,默认端口为D29  
 583   1          if(pSignalLine->cd.pin == 0)  pSignalLine->cd.pin   = D30;  //闯动传感器,默认端口为D30
 584   1          //if(pSignalLine->dw3.pin == 0) pSignalLine->dw3.pin  = D31;//备用,默认端口为D31
 585   1          if(pSignalLine->rc3.pin == 0) pSignalLine->rc3.pin  = D32;  //绕车3,默认端口为D32
 586   1      }
 587          //========================================================================
 588          // 函数: void GetDataPack(u8 *pData，u16 lenth)
 589          // 描述: 获取按照通讯协议的打包数据.
 590          // 参数: pData指向发给串口的数据数组,lenth需要获取的数据长度.
 591          // 返回: 无.
 592          // 版本: V1.0, 2022-10-17
 593          //========================================================================
 594          void GetDataPack(u8 pDatabuf[], u16 lenth)
 595          {
 596   1            
 597   1            static xdata u8 count=0;
 598   1        
 599   1            pDatabuf[0]   |= (jiaosha(&SignalLine) << 0);             //脚杀
 600   1            pDatabuf[0] |=  (lihe(&SignalLine) << 1);               //离合器        
 601   1            pDatabuf[0] |=  (jinguang(&SignalLine) << 2);           //近光灯
 602   1            pDatabuf[0] |=  (yuanguang(&SignalLine) << 3);          //远光灯  
 603   1            pDatabuf[0] |=  (youzhuanxiangdeng(&SignalLine) << 4);  //右转向      
 604   1            pDatabuf[0] |=  (zuozhuanxiangdeng(&SignalLine) << 5);  //左转向
 605   1            pDatabuf[0] |=  (shousha(&SignalLine)<<6);              //手刹
 606   1            pDatabuf[0] |=  (zuoyitiaojie(&SignalLine)<<7);         //座椅
 607   1            
 608   1            pDatabuf[1] |=  (laba(&SignalLine) << 0);       //喇叭
 609   1            pDatabuf[1] |=  (daochedeng(&SignalLine) << 2); //倒车灯开关    
 610   1            pDatabuf[1] |=  (xiaodeng(&SignalLine) << 3);   //小灯
 611   1            pDatabuf[1] |=  (shijing(&SignalLine) << 4);    //双闪
 612   1            pDatabuf[1] |=  (anquandai(&SignalLine) << 5);  //安全带开关    
C51 COMPILER V9.56.0.0   VEHICLESIGNAL                                                     10/29/2022 15:36:11 PAGE 11  

 613   1            pDatabuf[1] |=  (qidong(&SignalLine) << 6);     //启动开关
 614   1            pDatabuf[1] |=  (xihuo(&SignalLine) << 7);      //发动机转速
 615   1        
 616   1            pDatabuf[2] |=  chemen(&SignalLine);    //车门
 617   1            pDatabuf[2] |=  dangwei(&SignalLine);   //挡位
 618   1      
 619   1            pDatabuf[3] = 0;      //车速
 620   1            pDatabuf[4] = 0;      //发动机转速低八位   
 621   1            pDatabuf[5] = 0;      //发动机转速高八位
 622   1            
 623   1            pDatabuf[6]   |=  (kongdang(&SignalLine) << 0);   //空挡
 624   1            pDatabuf[6] |=  (zuoyiyali(&SignalLine) << 3);  //座椅开关
 625   1            
 626   1            pDatabuf[7] |=  (yushua(&SignalLine) << 0);     //雨刷
 627   1            pDatabuf[7] |=  (wudeng(&SignalLine) << 1);     //雾灯
 628   1            pDatabuf[7] |=  (neihoushi(&SignalLine) << 2);  //内后视
 629   1            pDatabuf[7] |=  (zuohoushi(&SignalLine) << 3);  //后视左
 630   1            pDatabuf[7] |=  (jinguang(&SignalLine) << 4);   //大灯
 631   1            pDatabuf[7] |=  (yuanguang(&SignalLine) << 4);  //大灯
 632   1            pDatabuf[7] |=  (fushache(&SignalLine) << 5);   //副刹
 633   1            pDatabuf[7] |=  (qidong(&SignalLine) << 6);     //启动
 634   1            //pDatabuf[8]=0;      //红绿灯状态
 635   1            //pDatabuf[9]=0;      //异常状态
 636   1      
 637   1            pDatabuf[10]  = raoche2(&SignalLine); //左前绕车
 638   1            pDatabuf[11]  = raoche1(&SignalLine); //左后绕车
 639   1            pDatabuf[12]  = raoche2(&SignalLine); //右后绕车
 640   1            pDatabuf[13]  = raoche3(&SignalLine); //右前绕车
 641   1      
 642   1            //pDatabuf[14]  = 0;      //里程计数高位//计数器0
 643   1            //pDatabuf[15]  = 0;      //里程计数低位//计数器0
 644   1            
 645   1            //*pDatabuf[16] = 0;    //备用
 646   1            pDatabuf[17]  = 0;      //板号高位
 647   1            pDatabuf[18]  = 0;      //板号低位
 648   1            
 649   1            pDatabuf[19]  = 0;      //汽车前轴左侧超声波传感器对地面的距离（单位厘米）
 650   1            pDatabuf[20]  = 0;      //汽车前轴右侧超声波传感器对地面的距离（单位厘米）
 651   1            pDatabuf[21]  = 0;      //汽车后轴左侧超声波传感器对地面的距离（单位厘米）
 652   1            pDatabuf[22]  = 0;      //汽车后轴右侧超声波传感器对地面的距离（单位厘米）
 653   1            pDatabuf[23]  = 0;      //牵引车中轴左侧超声波传感器对地面的距离（单位厘米）
 654   1            pDatabuf[24]  = 0;      //牵引车中轴右侧超声波传感器对地面的距离（单位厘米）
 655   1            
 656   1            pDatabuf[25]  = 0;        //训练圈数计数高位
 657   1            pDatabuf[26]  = 0;        //训练圈数计数低位
 658   1            
 659   1            pDatabuf[27]  = 0;        //车速高位
 660   1            pDatabuf[28]  = 0;        //车速低位
 661   1            pDatabuf[29]  = 0;        //离合AD值
 662   1            pDatabuf[30]  = 0;        //油门AD值
 663   1            
 664   1            pDatabuf[31]    |=  (yaoshimen(&SignalLine) << 0);      //钥匙开关
 665   1            pDatabuf[31]    |=  (chuangdong(&SignalLine) << 1);     //闯动开关
 666   1            //*pDatabuf[31]   |=  (toukui(&SignalLine) << 2);       //头盔（1=戴上）//摩托车
 667   1            //*pDatabuf[31]   |=  (zuobashou(&SignalLine) << 3);    //左把手（1=握上）//摩托车
 668   1            //*pDatabuf[31]   |=  (youbashou(&SignalLine) << 4);    //右把手（1=握上）//摩托车
 669   1            //*pDatabuf[31]   |=  (zuotaban(&SignalLine) << 5);     //左踏板（1=踩上）//摩托车
 670   1            //*pDatabuf[31]   |=  (youtaban(&SignalLine) << 6);     //右踏板（1=踩上）//摩托车
 671   1            //*pDatabuf[31]   |=  (youmentaban(&SignalLine) << 7);  //1=油门踏板 
 672   1            
 673   1            
 674   1            //*pDatabuf[32]   = BanBenHao;      //车载单片机固件号
C51 COMPILER V9.56.0.0   VEHICLESIGNAL                                                     10/29/2022 15:36:11 PAGE 12  

 675   1            //*pDatabuf[33]   = 0;              //方向盘转角
 676   1      
 677   1            //*pDatabuf[34]   |=  ((DBQ_LeftFront()&0x01)<<7);    //单边桥左前轮信号    （1=不在桥上，0=在桥上）
 678   1            //*pDatabuf[34]   |=  ((DBQ_LeftRear()&0x01)<<6);     //单边桥左后轮信号    （1=不在桥上，0=在桥上）
 679   1            //*pDatabuf[34]   |=  ((DBQ_RightFront()&0x01)<<5);   //单边桥右前轮信号    （1=不在桥上，0=在桥上）
 680   1            //*pDatabuf[34]   |=  ((DBQ_RightRear()&0x01)<<4);    //单边桥右后轮信号    （1=不在桥上，0=在桥上）
 681   1            //*pDatabuf[34]   |=  ((DBQ_LeftMiddle()&0x01)<<3);   //单边桥左挂车轮信号  （1=不在桥上，0=在桥上）
 682   1            //*pDatabuf[34]   |=  ((DBQ_RightMiddle()&0x01)<<2);  //单边桥右挂车轮信号  （1=不在桥上，0=在桥上）
 683   1            //*pDatabuf[34]   |=  ((gaosujingshi()&0x01)<<1);     //1=高速警示标志
 684   1            //*pDatabuf[34]   |=  ((gaosuanquan()&0x01)<<0);      //1=高速安全区域//无锡检测使用
 685   1            
 686   1            //*pDatabuf[35]   = 0;    //项目类型--01桩考，02限宽门，03牵引车桩考，04连续障碍，05单边桥
 687   1            //*pDatabuf[36]   = 0;    //项目编号01，02，03....
 688   1            //*pDatabuf[37]   = 0;    //碰杆位置01，02，03，04，05，06...（00=无碰杆）
 689   1            //*pDatabuf[38]   = 0;    //接近开关
 690   1            //*pDatabuf[39]   = 0;    //科大讯飞语音状态，41正在合成，4F合成完毕，00空闲状态
 691   1      
 692   1            //*pDatabuf[40]   = (char)Y1; //单边桥车前Y轴数据（[有符号char]，取小数点后一位，*10倍上传）
 693   1            //*pDatabuf[41]   = (char)Y2; //单边桥车后Y轴数据（[有符号char]，取小数点后一位，*10倍上传）
 694   1            //*pDatabuf[42]   = (char)Y3; //单边桥车挂Y轴数据（[有符号char]，取小数点后一位，*10倍上传）
 695   1            
 696   1            //*pDatabuf[43]   = 0;    //（二轮摩托）车身Y轴原始数据-低位 （横滚角，右倾为正：右低左高，正。）
 697   1            //*pDatabuf[44]   = 0;    //（二轮摩托）车身Y轴原始数据-高位
 698   1            //*pDatabuf[45]   = 0;    // (二轮摩托）车身X轴原始数据-低位 （俯仰角，仰为正）
 699   1            //*pDatabuf[46]   = 0;    //（二轮摩托）车身X轴原始数据-高位
 700   1            
 701   1            //*pDatabuf[47]   = ID_length;  //主板序列号字节数（便于以后其他系列升级）
 702   1            //*pDatabuf[48]   = RID[0];
 703   1            //*pDatabuf[49]   = RID[1];
 704   1            //*pDatabuf[50]   = RID[2];
 705   1            //*pDatabuf[51]   = RID[3];
 706   1            //*pDatabuf[52]   = RID[4];
 707   1            //*pDatabuf[53]   = RID[5];
 708   1            //*pDatabuf[54]   = RID[6];
 709   1      
 710   1            pDatabuf[55]    |=  (guanchayibiao(&SignalLine) << 0);//观察仪表盘
 711   1            
 712   1            pDatabuf[lenth-2]   = count++;    //数据标签为数据长度的倒数第二位,每次增加1    
 713   1      } 
 714          
 715          
 716          
 717          
 718          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3013    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    213      18
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      21
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
